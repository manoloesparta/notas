En programacion orientada a objetos se identifica por que todo se maneja por objetos y como todos los objetos en la vida real tambien tienen funciones/metodos y atributos

Para crear un clase simplemente usamos la keyword class

class Clase:
	pass

a partir de una clase creamos instance variables que son variable hechas a semajnza de la clase

objeto1 = Clase()
objeto2 = Clase()

Y podemos empezar a determinar los atributos

objeto1.atributo = 'String1'
objeto2.atributp = 'String2'

Pero hacer esto para declara cada atributo no es buena idea porque hace que escribamos mucho codigo

Entonces dentro de la clase empezamos a definir los atributos en un funcion llamada __init__ que es la que se ejecuta cuando creamos un objeto a modelo de la clase

class Clase:
	def __init__(self,valor):
		self.atributo = valor

El parametro self sirve para que la clase se refiera a si misma dentro de los metodos

Ahora podemos crear objetos de esta manera

objeto = Clase('String')

Ahora vamos a crear un metodo dentro de la clase (funcion)

class Clase:
	def __init__(self,valor):
		self.atributo = valor
	def metodo(self, valor):
		return self.atributo + valor

Lo que hace es devolver el valor del atributo que se declaro

print(objeto.metodo('string')

Esto va imprimir el valor

Que no se olvide que se pueden declarar variables dentro de una clase fuera de un metodo, pero no se puede acceder globalmente

class Clase:
	variable = 0
print(Clase.variable)

Cuando queremos que una variable no se restaure al valor original cuando creamos otro objeto, dentro de la clase nos referimos a el con su nombre de clase y no con self

class Clase:
	variable = 0
	def __init__(self,valor):
		self.valor = valor
		Clase.variable += 1