re es una abreviacion de regular expressions que son funciones para buscar y alterar strings

re tambien es una libreria la cual tenemos que importar

Tenemos funciones como:

.search(): busca si un sctring se encuentra dentro de otro string
re.search('string','otro string')

.findall(): encuentra todas las veces que se repite un string dentro dedotro, esto devuelve una lista
re.findall('string.','otro string string')
# Si le agrego un punto al primer string significa que me muestre un caracter despues de donde se encuentra el otro string

.finditer(): te devuelve el nombre o id del string dentro del string
.span(): te devuelve como tupla donde empieza y donde termina el string que buscabas dentro de otro
str = 'un string'
for i in re.finditer('string.',str):
	loc = i.span()
	print(loc)
	print(loc[0]:loc[1])
#esto te devuelve lo posicion del string inicio y final como tupla y tambien por si se repite el string, y la ultima linea te muestra el string

Tenemos opciones especiales que podemos usar en regez, se usan todas en el string que se busca dentro de otro con el metodo .findall()

re.findall('[Aa]men','Siglos amen')
Cuando ponemos caracteres en brackets estamos diciendo que el string que buscamos puede emepzar con una de los caracteres que le estamos poniendo, y lo que esta fuera de los brackets es lo que le seguiria al string
#Por ejemplo en la funcion de arriba la funcion estaria buscando Amen o amen 

re.findall('[a-d]an','aan can')
Cuando usamos un guion le decimos que de este caracter hasta este otro buscame como incio, en este caso seria a,b,c,d (Tambien se puede usar con numero [0-9])
#Esta funcion esta buscando aan ban can dan

re.findall('[^H]ola','hola como Hola')
Cuando usamos el caracter ^ le decimos a la funcion que queremos que nos devuelva los resulatos que no tenga esos caracteres
#Esta funcion solo me va devolver hola, porque la otra tiene mayuscula H

regex = re.compile([cr]at)
Lo que hace este metodos es crear un objeto regex, osea que le hereda los metodos y atributos, se espcicifa la regular expression dentro de la funcion

regex.sub('hola', 'cat rat pan')
Esto lo que hace es sustituir el string hola dentro del otro string por lo que cumplan las condiciones ya establecidas en la variable anterior, este metodo no se usa sobre la libreria re, sino por el objeto regex que creamos anteriormente
#En este caso se remplaza la palabra car y rat por la palabra hola

re.search(r"\\a","\\a")
Cuando colocamos un r antes del primer string en el metodo .search lo convertimos en un raw string, eso significa que los backslash (\) son tomados como caracteres y no para escapar valores
#En este caso nos mandaria la parte del string \\a, pero si no ponemos la r no manda nada

re.findall('.','F.B.I. I.R.S. CIA')
El punto nos devuelve cada unos de los caracteres en una lista dentro del string, pero si queremos buscar un punto dentro del string solo usamos un backslash asi
re.findall('\.','F.B.I. I.R.S. CIA')
Y para conseguir solo los valores de F.B.I. e I.R.S. asi
re.findall('.\..\..\.','F.B.I. I.R.S. CIA')

Cuando hacemos string de muchas lineas, para quitar las lineas solo sustituimos los \n

\b = backspace
\f = form feed
\r = carriage return
\t = tab
\v = vertical tab

Existen diferetes banderas que podemos usar dentro de re

\d = [0-9]
\D = [^0-9]
\w = [a-zA-Z0-9_]
\W = [^a-zA-Z0-9_]
\s = [\f\n\r\t\v]
\S = [^\f\n\r\t\v]

#tambien se puede especificar que tan grande el stack de digitos \d{2} o aclarar un alcance de digitos con \d{2,5}

Esto es para ver si un string es un correo email o no

re.findall("[\w._%+-]{1,20}@[\w.-]{2,20}.[A-Za-z]{2,3}", "db@aol.com m@.com @apple.com db@.com")

str = 'cat cats'
regex = re.compile('[cat]+s?')
total = re.findall(regex, str)
Cuando usamos el signo de positivo (+)significa que nos va devolver uno o mas caracteres hasta que se encuentre con un espacio. Y tambien cuando colocamos un caracter despues del + y con un signo de interrogacion dices que devuelva los valores que tienen ese caracter y los que no
#En este caso devolveria una lista con los valores ['cat','cats']

str = 'doctor doctors doctor's'
regex = "[doctor]+['s]*"
re.findall(regex, str)
Cuando usamos un el signo de multiplicacion (*) lo que damos a entender es que nos devuelva un string de aqui hasta aca (<inicio>*<final>) y si no colocamos final nos da hasta el final del string
#En este caso devuelve [doctor,doctors,doctor's]

Greety: Agarra el mayor resultado posible eg .*
Lazy: Agarra el menos resultado posible eg .*?

str = 'ape at the apex'
regex = re.compile(r'\bape\b')
re.findall(regex, str)
Cuando queremos que nos de una palabra completa y no parte de una palabra tenemos que delimitar el string con backspace (\b) inicio y final, asi solo nos devolvera resultados que sean solo la palabra en si, y convertir a raw string
#En este caso solo devuelve [ape] y no apex porque tiene un caracter de mas, la x y solo buscamos ape (\bape\b)

Para los string boundries tenemos dos tags

^ = inicio de string
$ = final de string

str = 'Quiero todo excepto @'
regex = re.compile(r'^.*[^@]')
re.findall(regex,str)
Aqui estamos usando los string boundries primero definimos con ^ que ahi empieza el string, luego con . decimos cualquier caracter y con * decimos que todos y con [^@] ponemos un limite de que ignore ese caracter
#En este caso el output seria Quiero todo excepto

str = '@ Quiero todo excepto'
regex = re.compile(r'[^@\s].*$')
re.findall(regex,str)
Ahi le estamos diciendo que ignore el @ y el espacio con \s y que el inicio del string sea despues de esos caracteres
#Esto regresaria Quiero todo excepto

str = '''Hola a
eso e
aqui no'''
regex = re.compile(r'(?m)^.*?\s')
re.findall(regex,randstr)
Cuando usamos (?m) es para aplicar el regex a cada linea cuando tenemos un string de multilineas
#El resultado de esto es solo la primera palabra de cada linea del string

() : cuando usamos parentesis en regex no podemos usar rangos (ranges) es como si tomara el texto crudo
[] : en lugar los brackets si acpeta los rangos y no como string

str = "412-555-1212"
regex = re.compile(r"412-(.{8})")
re.findall(regex, str)
Cuando tenemos u punto nos refereimos a que se una un caracter mas, pero cuando a un lado ponemos unis {n} decimos que tantos caracteres despues
#En este caso el output seria 555-1212 